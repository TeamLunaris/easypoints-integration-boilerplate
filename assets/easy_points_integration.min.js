const EasyPoints = { Debug: { DEBUG: !0, print: (e, t = 'info') => { if (!this.DEBUG) { return; } const o = `[EasyPoints] ${e}`; switch (t.toLowerCase()) { case 'warn': console.warn(o); break; case 'error': console.error(o); break; default: console.info(o); } } }, Selectors: { getElementBy$: (e, t, o = !1) => { const n = o ? e.querySelectorAll(t) : e.querySelector(t); return n || EasyPoints.Debug.print(`Could not locate ${t}`, 'warn'), n; }, getTotalPointsEl: (e, t = !1) => this.getElementBy$(e, '[data-loyal-target="total-points-value"]', t), getRedeemContainerEl: (e, t = !1) => this.getElementBy$(e, '.easy-points-form__container', t), getRedeemPointsButtonEl: (e, t = !1) => this.getElementBy$(e, '.easy-points-button__redeem', t), getResetPointsButtonEl: (e, t = !1) => this.getElementBy$(e, '.easy-points-button__reset', t), getRedeemPointsInputEl: (e, t = !1) => this.getElementBy$(e, '.easy-points-form__input input', t), getCheckoutButtonEl: (e, t = !1) => this.getElementBy$(e, '[type="submit"][name="checkout"]', t), getAdditionalCheckoutButtonEl: (e, t = !1) => this.getElementBy$(e, '.additional-checkout-buttons', t) }, Points: { getExcludedCost: () => Array.from(document.querySelectorAll('[data-loyal-target="point-exclusion"]')).reduce(((e, t) => e + parseInt(t.dataset.loyalCurrencyCost)), 0), getTotalBonusPoints: (e = document) => Array.from(e.querySelectorAll('[data-loyal-bonus-points]')).reduce(((e, t) => { let { bonusPoints: o } = JSON.parse(t.dataset.loyalBonusPoints); return o = parseInt(o), !Number.isNaN(o) && o > 0 ? e + o : e; }), 0), insertTotalPoints(e) { EasyPoints.Selectors.getTotalPointsEl(e, !0).forEach(((e) => { let t = !1; const { tax: o } = JSON.parse(e.dataset.loyalOpts); let n = parseInt(e.dataset.loyalCurrencyCost); if (!o.awardable || !o.included) { t = !0, n = [...document.querySelectorAll('[data-loyal-target="point-value"]')].reduce(((e, t) => { const { loyalCurrencyCost: o, loyalQuantity: n } = t.dataset; return o * n + e; }), 0); }n -= EasyPoints.Points.getExcludedCost(), EasyPoints.Points.setCurrencyCost(e, { price: Math.floor(n), ignoreTax: t }), window.insertPointValue(e); let s = parseInt(e.innerText.replace(/\D/g, '')); Number.isNaN(s) && (s = parseInt(e.textContent.replace(/\D/g, ''))), s += Math.round(EasyPoints.Points.getTotalBonusPoints(e)), window.insertPointValueIntoElement(e, s); })); }, getPriceFromEl: (e, t = null, o = /[^\d]/g) => { const n = t ? e.querySelector(t) : e; return n ? 100 * parseInt(n.textContent.replace(o, '')) : null; }, getTaxedCost: ({ price: e, tax: t }, o = null) => { let n = t; if (o !== null && o.dataset.loyalOpts) { n = JSON.parse(o.dataset.loyalOpts).tax; } return n === null ? (EasyPoints.Debug.print('Tax object not defined.', 'error'), e) : n.included || n.exempt ? e : Math.floor(e * n.rate); }, setCost(e, t, { price: o = null, multiplier: n = 1, ignoreTax: s = !1 }) { let a = (o !== null ? o : parseInt(e.dataset.loyalCurrencyCost)) * n; if (a <= 0) { e.setAttribute(t, 0); } else { if (e.dataset.loyalOpts) { const t = JSON.parse(e.dataset.loyalOpts); s || (a = this.getTaxedCost({ price: a, tax: t.tax })); }e.setAttribute(t, a); } }, setCurrencyCost(e, t) { this.setCost(e, 'data-loyal-currency-cost', t); }, resetTargets: (e = {}, t = null, o = null) => { const n = o != null ? `${o} [data-loyal-target="point-value"]` : '[data-loyal-target="point-value"]'; document.querySelectorAll(n).forEach(((t) => { t.classList.contains('points-after-applied-discount') || this.setCurrencyCost(t, e); })), t ? t() : window.updateLoyaltyTargets(); } }, Cart: { url: () => `${window.location.origin}/cart.json`, getFromJSON: (e) => { const t = new window.XMLHttpRequest(); t.onreadystatechange = () => { if (t.readyState === window.XMLHttpRequest.DONE) { const { status: o } = t; o === 0 || o >= 200 && o < 400 ? e(JSON.parse(t.responseText)) : EasyPoints.Debug.print('Failed getting data from /cart.json', 'error'); } }, t.open('GET', this.url()), t.setRequestHeader('accept', 'application/json'), t.send(); }, setRedemptionForm: () => { this.getFromJSON(((e) => { const t = document.getElementById('point-redemption-form'); if (t) { const o = t.querySelector('input[name="coupon[max_redeemable]"]'); o && (o.value = e.total_price), e.items.forEach(((e) => { const o = t.querySelectorAll('input[name="coupon[product_ids][]"]'); if (!Array.prototype.find.call(o, ((t) => String(t.value) === String(e.product_id)))) { const o = document.createElement('input'); o.setAttribute('type', 'hidden'), o.setAttribute('name', 'coupon[product_ids][]'), o.setAttribute('value', e.product_id), t.appendChild(o), EasyPoints.Debug.print('New cart item input created for the submission form.'); } })); } })); } }, Referrals: { setup() { const e = 'easy-points-ref'; const t = new URLSearchParams(window.location.search); const o = t.get(e); if (o === window.EasyPointsData.customer?.id?.toString()) { return; } t.has(e) && !window.localStorage.getItem(e) && window.localStorage.setItem(e, o); const n = window.localStorage.getItem(e); const s = document.querySelector('form[action="/account"]'); if (s && n) { if (s.querySelector('input[name="form_type"][value="create_customer"]')) { const e = EasyPoints.Referrals.createReferralInput('customer[note][easypoints-referrer]', n); s.appendChild(e); } } const a = [...document.querySelectorAll('form[action="/cart/add"]') || []]; if (a.length > 0) { const n = a[0].querySelector('input[name="id"]').value; const s = `${e}-products`; const i = JSON.parse(window.localStorage.getItem(s) || '{}'); t.has(e) && (i[n] = o, window.localStorage.setItem(s, JSON.stringify(i))); const r = i[n]; r && a.forEach(((e) => { e.appendChild(window.EasyPoints.Referrals.createReferralInput('properties[_easypoints-referrer]', r)); })); }document.querySelector('#easy-points__referral-copy')?.addEventListener('click', EasyPoints.Referrals.copyToClipboard), document.querySelector('.easy-points__referral-social-share')?.addEventListener('click', EasyPoints.Referrals.openMediaShare), document.querySelector('.easy-points__referral-share')?.addEventListener('click', EasyPoints.Referrals.openModal), document.querySelector('.easy-points__referral-close-button')?.addEventListener('click', EasyPoints.Referrals.closeModal), document.querySelector('.easy-points__referral-modal')?.addEventListener('click', ((e) => { e.target === document.querySelector('.easy-points__referral-modal') && EasyPoints.Referrals.closeModal(); })); }, createReferralInput(e, t) { const o = document.createElement('input'); return o.type = 'hidden', o.value = t, o.name = e, o; }, copyToClipboard() { const e = document.querySelector('#easy-points__referral'); const t = e.querySelector('.easy-points__referral-input input'); e.hasAttribute('copying') || e.hasAttribute('copied') || (e.setAttribute('copying', !0), setTimeout((() => { e.setAttribute('copied', !0), e.removeAttribute('copying'); }), 350), setTimeout((() => { e.removeAttribute('copied'); }), 1500), window.navigator.clipboard.writeText(t.value)); }, openMediaShare(e) { const t = document.querySelector('#easy-points-ref-url').value; const { base: o } = e.target.dataset; const n = o.replace('{url}', encodeURIComponent(t)); window.open(n, '_blank'); }, closeModal() { document.querySelector('.easy-points__referral-modal').dataset.open = !1; }, openModal() { const e = document.querySelector('#easy-points-ref-url').value; window.navigator.share ? window.navigator.share({ url: e }) : document.querySelector('.easy-points__referral-modal').dataset.open = !0; } }, UI: { showHidden: () => { EasyPoints.Selectors.getElementBy$(document, '.hidden-unless-discount-applied', !0).forEach(((e) => e.classList.remove('easy-points-hide'))); }, hideHidden: () => { EasyPoints.Selectors.getElementBy$(document, '.hidden-unless-discount-applied', !0).forEach(((e) => e.classList.add('easy-points-hide'))); }, cloneSubtotal: () => { EasyPoints.Selectors.getElementBy$(document, '[data-loyal-target="subtotal"]', !0).forEach(((e) => { const t = e.cloneNode(!0); t.removeAttribute('data-loyal-target'), t.setAttribute('data-loyal-clone', 'subtotal'), e.classList.add('easy-points-hide'), e.insertAdjacentElement('beforebegin', this.modifySubtotal(t)); })); }, resetClonedSubtotal: () => { EasyPoints.Selectors.getElementBy$(document, '[data-loyal-clone]', !0).forEach(((e) => e.remove())), EasyPoints.Selectors.getElementBy$(document, '[data-loyal-target="subtotal"]', !0).forEach(((e) => e.classList.remove('easy-points-hide'))); }, modifySubtotal: (e) => { const t = e.querySelector('[data-loyal-target="total_price"]'); if (!t) { return EasyPoints.Debug.print('modifySubtotal(el): missing total price target.'), e; } const o = EasyPoints.getDiscountSession(); const n = t.dataset.loyalTotalPrice; const { multiplier: s } = window.EasyPointsCore.Currency.getFormatOptions() || { multiplier: 100 }; const a = n - Math.round(o * window.EasyPointsCore.Currency.getRate() * s); if (a >= 0) { t.innerHTML = window.EasyPointsCore.Currency.format(a); const o = e.querySelector('.points-after-applied-discount'); if (o) { const e = parseInt(o.innerText.replace(/\D/g, '')); const t = EasyPoints.Points.getTaxedCost({ price: n, tax: null }, o); const s = EasyPoints.Points.getTaxedCost({ price: a, tax: null }, o); window.insertPointValueIntoElement(o, window.formatBigNumber(Math.max(0, Math.ceil(s / t * e)))); } } return e; }, showDiscount: () => { this.showHidden(), this.buttonReset(); }, hideDiscount: () => { this.hideHidden(), this.buttonRedeem(); }, buttonRedeem: () => { EasyPoints.Selectors.getRedeemPointsInputEl(document, !0).forEach(((e) => e.removeAttribute('disabled'))), EasyPoints.Selectors.getResetPointsButtonEl(document, !0).forEach(((e) => e.classList.add('easy-points-hide'))), EasyPoints.Selectors.getRedeemPointsButtonEl(document, !0).forEach(((e) => e.classList.remove('easy-points-hide'))); }, buttonReset: () => { EasyPoints.Selectors.getRedeemPointsInputEl(document, !0).forEach(((e) => { e.setAttribute('disabled', !0); const t = EasyPoints.getDiscountSession(); !e.classList.contains('valid') && (e.value === '' || e.value <= 0) && t > 0 && (e.value = t); })), EasyPoints.Selectors.getResetPointsButtonEl(document, !0).forEach(((e) => e.classList.remove('easy-points-hide'))), EasyPoints.Selectors.getRedeemPointsButtonEl(document, !0).forEach(((e) => e.classList.add('easy-points-hide'))); } }, Tiers: { recalculate: (e = null) => { const { rankAdvancementData: t } = window.getEasyPointsSession(); if (!t || t.raw_amount >= 0) { return; } const o = EasyPoints.getDiscountSession(); const { multiplier: n } = window.EasyPointsCore.Currency.getFormatOptions() || { multiplier: 100 }; const s = Math.round(o * window.EasyPointsCore.Currency.getRate() * n); if (e === null) { const t = document.querySelector('[data-loyal-target="total_price"]'); if (!t) { return void EasyPoints.Debug.print('recalculate(el): missing total price target.', 'error'); } e = t.dataset.loyalTotalPrice; } try { const t = window.EasyPointsCore.Tiers.getNextTier(e - s); t ? (Array.prototype.slice.call(document.querySelectorAll('[data-loyal-target="rank-advancement-tier-name"]')).forEach(((e) => { e.textContent = t.name; })), Array.prototype.slice.call(document.querySelectorAll('[data-loyal-target="rank-advancement-amount"]')).forEach(((e) => { e.innerHTML = EasyPointsCore.Currency.format(t.advancementAmountMultiplied); }))) : Array.prototype.slice.call(document.querySelectorAll('[data-loyal-target="rank-advancement-data"] > span')).forEach(((e) => { e.style.display = e.dataset.loyalTarget === 'max-rank' ? '' : 'none'; })); } catch { EasyPoints.Debug.print('EasyPoints Tiers: error getting next tier.', 'error'); } } }, getDiscountSession: () => { const e = window.sessionStorage.getItem('appliedDiscount'); return e ? parseInt(e) : 0; }, applyDiscount: () => { const e = this.getDiscountSession(); EasyPoints.Debug.print(`Applying discount: ${e}`), e > 0 && (window.displayDiscount(e), EasyPoints.UI.showDiscount(), EasyPoints.UI.cloneSubtotal(), EasyPoints.Selectors.getAdditionalCheckoutButtonEl(document, !0).forEach(((e) => e.classList.add('easy-points-hide')))); }, reset: () => { EasyPoints.UI.hideDiscount(), EasyPoints.UI.resetClonedSubtotal(), EasyPoints.Selectors.getAdditionalCheckoutButtonEl(document, !0).forEach(((e) => e.classList.remove('easy-points-hide'))), window.sessionStorage.removeItem('appliedDiscount'), EasyPoints.Selectors.getRedeemPointsInputEl(document, !0).forEach(((e) => e.value = '')); }, Form: { update({ points: e }) { const t = EasyPoints.Selectors.getElementBy$(document, '#redemption-point-value'); return t ? (t.value = e, window.EasyPointsCore.Validate.pointRedemption() ? (window.sessionStorage.setItem('appliedDiscount', e), EasyPoints.Selectors.getRedeemPointsInputEl(document, !0).forEach(((e) => e.classList.remove('invalid'))), !0) : (window.sessionStorage.removeItem('appliedDiscount'), EasyPoints.Selectors.getRedeemPointsInputEl(document, !0).forEach(((e) => e.classList.add('invalid'))), !1)) : (window.sessionStorage.removeItem('appliedDiscount'), !1); }, redeem({ event: e = null, points: t = null }) { if (t == null) { if (e == null) { return EasyPoints.Debug.print('redeem({event, points}): cant get the points value', 'error'), !1; } const o = e.target.closest('.easy-points-form__container'); if (!o) { return EasyPoints.Debug.print('redeem({event, points}): target form is not defined'), !1; } (input = window.EasyPoints.Selectors.getRedeemPointsInputEl(o)) && (input.value = input.value.toString().replace(/[^\d]/g, ''), t = input.value); } return this.update({ points: t }); }, setCoupon(e = null, t = null) { if (t != null && !t || EasyPoints.getDiscountSession() > 0 ? (EasyPoints.Debug.print('Using /redeem'), form = window.buildForm('/apps/loyalty/redeem')) : (EasyPoints.Debug.print('Using /reset'), form = window.buildForm('/apps/loyalty/reset')), form) { const t = new window.XMLHttpRequest(); t.onreadystatechange = (t) => { t.readyState === 4 && (EasyPoints.Debug.print('Submitted'), e && e()); }, t.open('POST', form.action); const o = new FormData(form); t.send(o), EasyPoints.Debug.print('Submitting form'); } else { e && e(); } } }, Register: { submissionReady: !1, run: () => { window.updateLoyaltyTargets(), EasyPoints.Points.insertTotalPoints(document), EasyPoints.Tiers.recalculate(), this.setEventListeners(), EasyPoints.applyDiscount(); }, setEventListeners: () => { EasyPoints.Selectors.getRedeemContainerEl(document, !0).length !== 0 && (EasyPoints.Selectors.getRedeemPointsInputEl(document, !0).forEach(((e) => { e.addEventListener('focus', this.onPointsInput), e.value > 0 && EasyPoints.Form.update({ points: EasyPoints.getDiscountSession() }); })), EasyPoints.Selectors.getRedeemPointsButtonEl(document, !0).forEach(((e) => e.addEventListener('click', this.onClickRedeemBtn))), EasyPoints.Selectors.getResetPointsButtonEl(document, !0).forEach(((e) => e.addEventListener('click', this.onClickResetBtn))), EasyPoints.Selectors.getCheckoutButtonEl(document, !0).forEach(((e) => e.addEventListener('click', this.onClickSetCoupon))), EasyPoints.Debug.print('Applied all required event listeners')); }, onPointsInput: (e) => { e.target.classList.remove('invalid'); }, onClickRedeemBtn: (e) => { e.preventDefault(), EasyPoints.Debug.print('Clicked: Redeem'), EasyPoints.Register.submissionReady = !1, EasyPoints.Form.redeem({ event: e }) && EasyPoints.applyDiscount(); }, onClickResetBtn: (e) => { e.preventDefault(), EasyPoints.Debug.print('Clicked: Reset'), EasyPoints.Register.submissionReady = !1, EasyPoints.reset({ event: e }); }, onClickSetCoupon(e, t = null) { if (EasyPoints.Debug.print('Clicked: checkout'), EasyPoints.Register.submissionReady) { return void EasyPoints.Debug.print('> ready to checkout'); } EasyPoints.Debug.print('Setting coupon'), e.preventDefault(), e.stopPropagation(); const o = e.target; o.style.cursor = 'progress', o.classList.add('btn--loading'), o.setAttribute('disabled', !0), EasyPoints.Form.setCoupon((() => { EasyPoints.Register.submissionReady = !0, o.style.cursor = 'unset', o.classList.remove('btn--loading'), o.removeAttribute('disabled'), o.click(), t && t(); })); } } }; window.addEventListener('DOMContentLoaded', (() => { const e = this.window.location.pathname; EasyPoints.Referrals.setup(), e.match(/\/cart/i) && (EasyPoints.reset({}), EasyPoints.Register.run()); }));
